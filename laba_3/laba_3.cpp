#include <iostream>
#include <time.h>

using namespace std;

// I. Реализовать класс для работы с матрицами целых чисел задаваемой размерности.
// При этом в классе необходимо реализовать следующую функциональность:
//      1. Инициализация матрицы с помощью:
//          a. Конструктора по умолчанию для инициализации матрицы размерности 0
//          b. Конструктора, принимающего одно целочисленное значение, для инициализации единичной квадратной матрицы
// указанной размерности. Единичная матрица — квадратная матрица, элементы главной диагонали которой равны единице,
// а остальные равны нулю
//          c. Конструктора, принимающего размерность матрицы, для инициализации матрицы указанной размерности
//      3. Ввод значений матрицы с клавиатуры
//      4. Заполнение матрицы случайными числами
//      5. Вывод матрицы на экран
//      6. Подсчет суммы элементов матрицы с выводом на экран (сумма сохраняется в соответствующем поле класса)
//      7. В деструкторе - корректное очищение динамической памяти (удаление матрицы)

class Matrix
{
private:
    int rows;
    int cols;
    int sum;
    int **matrix;

public:
    // 1.a. Конструктор по умолчанию для инициализации матрицы размерности 0
    Matrix()
    {
        rows = 0;
        cols = 0;
        sum = 0;
        matrix = new int *[rows * cols];
        for (int i = 0; i < rows; ++i)
        {
            matrix[i] = new int[cols];
        }
    }

    // 1.b. Конструктор, принимающий одно целочисленное значение, для инициализации единичной
    //      квадратной матрицы указанной размерности
    Matrix(int size) : rows(size), cols(size), matrix(new int *[size])
    {
        sum = 0;
        for (int i = 0; i < size; ++i)
        {
            matrix[i] = new int[size];
            for (int j = 0; j < size; ++j)
            {
                if (i == j)
                {
                    matrix[i][j] = 1;
                }
                else
                {
                    matrix[i][j] = 0;
                }
            }
        }
    }
    // 1.c. Конструктор, принимающий размерность матрицы, для инициализации матрицы указанной размерности
    Matrix(int rows, int cols) : rows(rows), cols(cols), matrix(new int *[rows * cols])
    {
        sum = 0;
        for (int i = 0; i < rows; ++i)
        {
            matrix[i] = new int[cols];
            for (int j = 0; j < cols; ++j)
            {
                matrix[i][j] = 0;
            }
        }
    }

    // 7. Деструктор
    ~Matrix()
    {
        for (int i = 0; i < rows; ++i)
        {
            delete[] matrix[i];
        }
        delete[] matrix;
    }

    // Геттеры
    int get_rows() const { return rows; }
    int get_cols() const { return cols; }

    // 3. Ввод значений матрицы с клавиатуры
    void cin_matrix()
    {
        for (int i = 0; i < this->rows; ++i)
        {
            for (int j = 0; j < this->cols; ++j)
            {
                cin >> this->matrix[i][j];
            }
        }
        cout << endl;
    }

    // 4. Заполнение матрицы случайными числами
    void rand_matrix()
    {
        for (int i = 0; i < this->rows; ++i)
        {
            for (int j = 0; j < this->cols; ++j)
            {
                this->matrix[i][j] = rand() % 100;
            }
        }
    }

    // 5. Вывод матрицы на экран
    void print_matrix()
    {
        for (int i = 0; i < this->rows; ++i)
        {
            for (int j = 0; j < this->cols; ++j)
            {
                cout << this->matrix[i][j] << "\t";
            }
            cout << endl;
        }
        cout << endl;
    }

    // 6. Подсчет суммы элементов матрицы с выводом на экран (сумма сохраняется в соответствующем поле класса)
    void sum_count()
    {
        for (int i = 0; i < this->rows; ++i)
        {
            for (int j = 0; j < this->cols; ++j)
            {
                sum += this->matrix[i][j];
            }
        }
        cout << "Сумма элементов матрицы = " << this->sum << endl;
    }

    // Заполниние числами, равными произведению номера строки и столбца соответствующего элемента
    void mult_rows_and_cols()
    {
        for (int i = 0; i < this->rows; ++i)
        {
            for (int j = 0; j < this->cols; ++j)
            {
                this->matrix[i][j] = i * j;
            }
        }
    }
};

// II. В качестве демонстрационного примера написать программу
//     1. Создать четыре разные матрицы, чтобы они инициализировались разными конструкторами :
// М1 - конструктором а,
// М2(размер 3) - конструктором b,
// М3(размер 3х4) - конструктором с,
// М4(размер 2х3) - конструктором с
//     2. Вывести на экран матрицы М2, М3, М4.
//     3. Матрицу М2 заполнить числами, равными произведению номера строки и столбца соответствующего элемента, вывести на экран
//     4. Матрицу М3 заполнить случайными числами, вывести на экран
//     5. Матрицу М4 заполнить вводом с клавиатуры, вывести на экран
//     6. У матрицы М3 посчитать сумму элементов, вывести значение суммы на экран

int main()
{
    srand(time(NULL));

    cout << "1 и 2. Создаём четыре матрицы:\n1)M1 - конструктором a (по умолчанию):\n";
    Matrix M1;
    M1.print_matrix();

    cout << "2) M2 (3x3) - конструктором b (квадратная единичная матрица):\n";
    Matrix M2(3);
    M2.print_matrix();

    cout << "3) M3 - конструктором c (3x4):\n";
    Matrix M3(3, 4);
    M3.print_matrix();

    cout << "4) M4 - конструктором c (2x3):\n";
    Matrix M4(2, 3);
    M4.print_matrix();

    cout << "3. Заполнение M2 произведениями номера строки и столбца соответствующего элемента:\n";
    M2.mult_rows_and_cols();
    M2.print_matrix();

    cout << "4. Заполнение M3(3x4) случайными числами:\n";
    M3.rand_matrix();
    M3.print_matrix();

    cout << "5. Заполнение M4(2x3) вводом с клавиатуры:\n";
    M4.cin_matrix();
    M4.print_matrix();

    cout << "6. Подсчёт суммы элементов M3(3x4):\n";
    M3.sum_count();

    return 0;
}